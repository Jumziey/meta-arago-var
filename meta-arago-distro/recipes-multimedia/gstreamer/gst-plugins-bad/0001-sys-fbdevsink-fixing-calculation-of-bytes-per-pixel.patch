From 76fc77de1d38b6a41585898e16dc259bbfbb50d3 Mon Sep 17 00:00:00 2001
From: Darren Etheridge <detheridge@ti.com>
Date: Wed, 20 Nov 2013 15:23:51 -0600
Subject: [PATCH] sys/fbdevsink:  fixing calculation of bytes per pixel

Original method will only work where there xres is identical to the
physically allocated buffer size.  On omapdss this is unlikely to be true
because of the way buffers are allocated out of a much larger buffer in
3 dimensions - meaning there often be a stride (or pitch) for each line.
Changing the method of figuring out the bytes per pixel to a method that
should work in all circumstances.

Signed-off-by: Darren Etheridge <detheridge@ti.com>
---
 sys/fbdev/gstfbdevsink.c | 21 ++++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/sys/fbdev/gstfbdevsink.c b/sys/fbdev/gstfbdevsink.c
index 7878fbf..aacef5e 100644
--- a/sys/fbdev/gstfbdevsink.c
+++ b/sys/fbdev/gstfbdevsink.c
@@ -213,7 +213,26 @@ gst_fbdevsink_setcaps (GstBaseSink * bsink, GstCaps * vscapslist)
   gst_structure_get_int (structure, "height", &fbdevsink->height);
 
   /* calculate centering and scanlengths for the video */
-  fbdevsink->bytespp = fbdevsink->fixinfo.line_length / fbdevsink->varinfo.xres;
+  switch(fbdevsink->varinfo.bits_per_pixel) {
+    case 8:
+      fbdevsink->bytespp = 1;
+      break;
+    case 15:
+    case 16:
+      fbdevsink->bytespp = 2;
+      break;
+    case 24:
+      fbdevsink->bytespp = 3;
+      break;
+    case 32:
+      fbdevsink->bytespp = 4;
+      break;
+    default:
+      /* other bit depths are not supported */
+      g_warning ("unsupported bit depth: %d\n",
+          fbdevsink->varinfo.bits_per_pixel);
+      return FALSE;
+  }
 
   fbdevsink->cx = ((int) fbdevsink->varinfo.xres - fbdevsink->width) / 2;
   if (fbdevsink->cx < 0)
-- 
1.8.3.2

